MSMC2 and MSMC-IM Analysis Pipeline Documentation

1. Data Preparation: Generating Mask and VCF Files from BAM Files

This section describes how to generate per-chromosome mask files and VCF files from high-depth sequencing BAM files for four samples.

1.1. Calculate Average Depth per Chromosome
The average depth is required for generating the sample-specific mask. While the example uses chr1, this should be done for each chromosome (chr1, chr2, ..., chrN) in a loop for each sample's BAM file.

bash
# Example for chromosome 1 of a sample
samtools depth -r chr1 <sample.bam> | awk '{sum += $3} END {print sum / NR}'
# Replace <sample.bam> with the path to your BAM file.
# The output is the mean coverage (depth) for chr1.
1.2. Generate Sample Mask and VCF Files
Using the mean coverage value calculated in the previous step, generate a mask file (in BED format) and a VCF file for each chromosome of each sample. The bamCaller.py script (part of the msmctools utilities) is used for this purpose.

bash
# Example command for a single chromosome (e.g., chr1) of a single sample
bcftools mpileup -C 50 -u -r chr1 -f <reference_genome.fa> <sample.bam> --threads 16 | \
bcftools call -c -V indels --threads 16 | \
./bamCaller.py <mean_coverage> <sample_chr1_mask.bed.gz> | \
bgzip -c > <sample_chr1.vcf.gz>

# Replace the placeholders:
# <reference_genome.fa>: Path to your reference genome FASTA file.
# <sample.bam>: Path to the input BAM file for the sample.
# <mean_coverage>: The average depth calculated for this chromosome and sample.
# <sample_chr1_mask.bed.gz>: Output path for the sample's mask file for chr1 (gzipped).
# <sample_chr1.vcf.gz>: Output path for the sample's VCF file for chr1 (gzipped).
Note: This process must be repeated for each chromosome and for each of the four samples, resulting in files like sample1_chr1.vcf.gz, sample1_chr1_mask.bed.gz, sample2_chr1.vcf.gz, etc.

2. Generating the Genome Mappability Mask

A general mappability mask for the reference genome is also required to exclude low-complexity or unmappable regions.

2.1. Run run_snpable2.sh
This script (often part of the MSMC tools ecosystem) processes the reference genome to identify mappable regions.

bash
# Assuming run_snpable2.sh is in your path or current directory
./run_snpable2.sh <reference_genome.fa>
# This will generate output files used in the next step.
2.2. Process with makeMappabilityMask.py
This Python script converts the output from run_snpable2.sh into the mask format required by MSMC.

bash
# Example command
python makeMappabilityMask.py <output_from_snpable> > <genome_mask.bed>
# Replace <output_from_snpable> with the relevant file generated by run_snpable2.sh (often a .mask file).
# Replace <genome_mask.bed> with the desired output file name for the genome-wide mask.
# This genome mask must also be split by chromosome for use in step 3.
3. Phasing VCFs with WhatsHap

Phase the per-chromosome VCF files for each sample using WhatsHap to improve haplotype resolution for MSMC2.

bash
# Example command for a single chromosome of a single sample
whatshap phase --output <phased_sample_chr1.vcf.gz> --reference <reference_genome.fa> <sample_chr1.vcf.gz> <sample.bam>
# Replace <phased_sample_chr1.vcf.gz> with the desired output name for the phased VCF.
# The original <sample_chr1.vcf.gz> and <sample.bam> are used as inputs.
Note: Repeat this for all chromosomes and all four samples. The phased VCFs (phased_*.vcf.gz) will be used as input for the next step.

4. Preparing MSMC2 Input Files

MSMC2 requires a specific input format (multihetsep). The generate_multihetsep.py script combines the sample masks, the genome mappability mask, and the phased VCFs to create this input for each chromosome.

bash
# Example command for chromosome 1
generate_multihetsep.py --chr chr1 \
    --mask sample1_chr1_mask.bed.gz \
    --mask sample2_chr1_mask.bed.gz \
    --mask sample3_chr1_mask.bed.gz \
    --mask sample4_chr1_mask.bed.gz \
    --mask genome_chr1_mask.bed \ # The chromosome-specific genome mappability mask
    phased_sample1_chr1.vcf.gz \
    phased_sample2_chr1.vcf.gz \
    phased_sample3_chr1.vcf.gz \
    phased_sample4_chr1.vcf.gz \
    > chr1.multihetsep.txt
Note: This command must be run for each chromosome independently, generating a *.multihetsep.txt file for each (chr1.multihetsep.txt, chr2.multihetsep.txt, ...).

5. Running MSMC2

MSMC2 is run twice: once for analysis within a species/population ("within") and once for analysis between species/populations ("cross").

5.1. Within-Species Analysis
This command runs MSMC2 on haplotypes from the same species (e.g., two individuals from Species 1). The -I flag specifies which haplotypes to use (0,1 = first two haplotypes; 2,3 = next two, etc.).

bash
# Example for Species 1 (using haplotypes 0 and 1 from the input)
msmc2 -I 0,1 -o species1_msmc2 chr1.multihetsep.txt chr2.multihetsep.txt chr3.multihetsep.txt ...
# The input files are all the chromosome-specific multihetsep files.

# Example for Species 2 (using haplotypes 2 and 3)
msmc2 -I 2,3 -o species2_msmc2 chr1.multihetsep.txt chr2.multihetsep.txt chr3.multihetsep.txt ...
5.2. Cross-Species Analysis
This command runs MSMC2 on all possible pairs of haplotypes between the two species. The -I flag defines the cross-haplotype pairs (0-2, 0-3, 1-2, 1-3).

bash
msmc2 -I 0-2,0-3,1-2,1-3 -o cross_species_msmc2 chr1.multihetsep.txt chr2.multihetsep.txt chr3.multihetsep.txt ...
6. Combining Results for MSMC-IM

The combineCrossCoal.py script combines the output from the within and cross analyses into a single file suitable for MSMC-IM.

bash
python combineCrossCoal.py cross_species_msmc2.final.txt species1_msmc2.final.txt species2_msmc2.final.txt > combined_crosspecies.msmc2.final.txt
# Replace the .final.txt filenames with the actual outputs from your MSMC2 runs.
7. Running MSMC-IM

Finally, run MSMC-IM using the combined file to infer isolation and migration history.

bash
python MSMC_IM.py \
    -beta 1e-8,1e-6 \ # Defines the grid search range for the migration rate (M)
    -o result \        # Output prefix
    -mu 5.97e-9 \      # Assumed mutation rate per base per generation
    --printfittingdetails \
    --plotfittingdetails \
    --xlog \           # Plot time axis on a logarithmic scale
    combined_crosspecies.msmc2.final.txt
