Population Genetic Analysis Pipeline: Fst, Dxy, and Pi using pixy and CMplot
1. Overview
This pipeline calculates key population genetics statistics—Fst (genetic differentiation), Dxy (absolute genetic divergence), and Pi (nucleotide diversity)—from a VCF file using the pixy software. The raw output from pixy is then processed by custom Python scripts to clean, split, and format the data, preparing it for final visualization using the CMplot package in R to generate Manhattan-style plots.

2. Core Analysis: Calculating Statistics with pixy
The first step is to run pixy to compute Fst, Dxy, and Pi statistics in windows across the genome.

Command:

bash
pixy --stats pi fst dxy \
     --vcf your_data.vcf.gz \        # Input VCF file (must be bgzipped and indexed)
     --populations popfile.txt \     # Tab-delimited file defining populations: `sample_name<TAB>population_name`
     --window_size 50000 \           # Size of the sliding window (50 kb in this case)
     --n_cores 8 \                   # Number of CPU cores to use (recommended)
     --output_prefix pixy_results    # Base name for output files
Output Files:

pixy_results_pi.txt: Nucleotide diversity (π) per population per window.

pixy_results_fst.txt: Genetic differentiation (Fst) per pair of populations per window.

pixy_results_dxy.txt: Absolute genetic divergence (Dxy) per pair of populations per window.

Input File (popfile.txt) Format:

text
sample1    popA
sample2    popA
sample3    popB
sample4    popB
sample5    popC
...
3. Data Processing with Custom Python Scripts
The raw pixy output files require processing to handle missing values, split data by population pairs, and reformat them for visualization.

3.1. Script 1: Fst_Dxy_1st.py (for Fst and Dxy data)
Purpose: This script serves as the primary cleaner and splitter for the pixy_results_fst.txt and pixy_results_dxy.txt files.

Key Functions:

Data Cleaning: Reads the input file and targets the 6th column (which contains the Fst or Dxy value). It replaces NA, NaN, na, nan values and any negative values with 0.

Data Splitting: Splits the combined data into separate files for each pre-defined population pair (e.g., popA_popB_fst.txt). It ensures the population names in the first two columns are consistently ordered (alphabetically) for each pair.

Sorting: Sorts the data in each output file by chromosome and then by genomic position.

Usage:

bash
python Fst_Dxy_1st.py
# Then enter the path to your file, e.g., `pixy_results_fst.txt`
Output: A directory (split_fst_files/) containing individual files for each population pair (e.g., popA_popB_fst.txt, popA_popC_fst.txt).

3.2. Script 2: Fst_Dxy_2nd.py (for Fst and Dxy data)
Purpose: This script acts as the formatter for the files generated by Script 1. It converts them into the standardized format required by CMplot.

Key Functions:

Format Conversion: Extracts the chromosome (column 3), position (column 4), and statistic value (column 6, the cleaned Fst or Dxy) from the split files.

Adds SNP Identifier: Creates a simple sequential SNP ID number for each data point, which is required by CMplot.

Outputs a clean, four-column table with the columns: SNP, Chromosome, Position, trait1 (which contains the Fst or Dxy value).

Usage:

bash
python Fst_Dxy_2nd.py popA_popB_fst.txt popA_popB_fst_CMplot.txt
Output: A formatted file (e.g., popA_popB_fst_CMplot.txt) ready for visualization.

3.3. Script 3: pi_1st.py (for Pi data)
Purpose: This script is the primary processor for the pixy_results_pi.txt file.

Key Functions:

Data Cleaning & Splitting: Reads the input Pi file. It replaces NA values in the 5th column (the Pi value) with 0 and filters the data to only include chromosomes 1 through 24.

Population Separation: Splits the single Pi file into four separate files, one for each population (popA, popB, popC, popD).

Sorting: Sorts the data in each population-specific file by chromosome and position.

Usage:

bash
python pi_1st.py pixy_results_pi.txt
Output: Four files: popA_output.txt, popB_output.txt, popC_output.txt, popD_output.txt.

3.4. Script 4: pi_2nd.py (for Pi data)
Purpose: This script is the formatter for the population-specific Pi files generated by Script 3.

Key Functions:

Format Conversion: Extracts the chromosome (column 2), position (column 3), and Pi value (column 5) from the split Pi files.

Adds SNP Identifier: Creates a sequential SNP ID number.

Outputs a clean, four-column table with the columns: SNP, Chromosome, Position, trait1 (which contains the Pi value).

Usage:

bash
python pi_2nd.py popA_output.txt popA_pi_CMplot.txt
Output: A formatted file (e.g., popA_pi_CMplot.txt) ready for visualization.

4. Visualization with CMplot in R
The final step is to create Manhattan plots to visualize the distribution of the statistics across the genome.

R Code Example (for Pi):

r
# Load the CMplot library
library(CMplot)

# Read the formatted data
pi_data <- read.table("popA_pi_CMplot.txt", header = TRUE)

# Generate a Manhattan plot
CMplot(pi_data,
       type = "p",           # Type of plot: "p" for points
       plot.type = "m",      # Plot type: "m" for Manhattan
       threshold = NULL,     # No significance threshold line
       file = "jpg",         # Output format: "jpg", "pdf", etc.
       file.name = "popA_Pi", # Base name for output file
       dpi = 300,            # High resolution output
       file.output = TRUE,   # Save to file
       verbose = TRUE,       # Print progress
       width = 14,           # Plot width (inches)
       height = 3,           # Plot height (inches)
       chr.labels.angle = 45,# Angle of chromosome labels
       LOG10 = FALSE,        # Do NOT plot -log10(values)
       ylab = "pi value",    # Y-axis label
       ylim = c(0, 0.6),     # Y-axis limits
       cex = 0.2             # Size of the points
)
Explanation of Key CMplot Arguments:

plot.type="m": Specifies a Manhattan plot.

LOG10=FALSE: Plots the raw values (e.g., 0.05) instead of their negative log-transformed value. This is crucial for population genetics statistics like Fst, Dxy, and Pi.

ylab and ylim: Set the Y-axis label and limits, respectively. Adjust ylim based on the range of your data.

cex: Controls the size of the points on the plot.

To create plots for Fst or Dxy, simply replace the input data and adjust the ylab and ylim parameters accordingly (e.g., ylab="Fst", ylim=c(0, 1)).

5. Summary of the Full Pipeline
Run pixy to calculate genome-wide Fst, Dxy, and Pi.

Process Fst/Dxy:

Use Fst_Dxy_1st.py to clean and split the combined Fst/Dxy file by population pair.

Use Fst_Dxy_2nd.py on each split file to format it for CMplot.

Process Pi:

Use pi_1st.py to clean, filter, and split the Pi file by population.

Use pi_2nd.py on each population file to format it for CMplot.

Visualize in R using the CMplot function for each formatted file to generate publication-ready Manhattan plots.